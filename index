import React, { useState, useEffect } from 'react';
import { Brain, Eye, MessageSquare, GitBranch, Zap, Cpu, Database, Activity } from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';

interface ComponentStatus {
  name: string;
  status: 'active' | 'idle' | 'processing' | 'error';
  load: number;
  uptime: string;
  icon: React.ReactNode;
}

interface SystemMetric {
  time: string;
  agio: number;
  silentVessel: number;
  echo: number;
  aetherBus: number;
}

interface ComponentCapability {
  component: string;
  philosophy: string;
  capability: string;
  performance: number;
}

const SyntheticBeingDashboard = () => {
  const [selectedComponent, setSelectedComponent] = useState<string>('overview');
  const [systemMetrics, setSystemMetrics] = useState<SystemMetric[]>([]);
  const [componentStatuses, setComponentStatuses] = useState<ComponentStatus[]>([
    {
      name: 'AGIO (Memory)',
      status: 'active',
      load: 72,
      uptime: '99.9%',
      icon: <Database className="w-6 h-6" />
    },
    {
      name: 'SilentVessel (Perception)',
      status: 'processing',
      load: 45,
      uptime: '98.7%',
      icon: <Eye className="w-6 h-6" />
    },
    {
      name: 'Echo (Expression)',
      status: 'active',
      load: 63,
      uptime: '99.2%',
      icon: <MessageSquare className="w-6 h-6" />
    },
    {
      name: 'AetherBus (Message Broker)',
      status: 'active',
      load: 38,
      uptime: '99.95%',
      icon: <Zap className="w-6 h-6" />
    }
  ]);

  const [capabilities] = useState<ComponentCapability[]>([
    { component: 'AGIO', philosophy: 'Multimodal RAG', capability: 'Memory System', performance: 95 },
    { component: 'SilentVessel', philosophy: 'BioVisionNet', capability: 'Qualia Extraction', performance: 88 },
    { component: 'Echo', philosophy: 'EmotionVector', capability: 'Expressive Output', performance: 91 },
    { component: 'AetherBus', philosophy: 'Event-Driven', capability: 'Message Orchestration', performance: 97 }
  ]);

  // Simulate real-time data
  useEffect(() => {
    const interval = setInterval(() => {
      const now = new Date();
      const timeString = now.toLocaleTimeString();
      
      setSystemMetrics(prev => {
        const newData = [...prev];
        if (newData.length > 20) newData.shift();
        
        newData.push({
          time: timeString,
          agio: Math.floor(Math.random() * 30) + 50,
          silentVessel: Math.floor(Math.random() * 25) + 30,
          echo: Math.floor(Math.random() * 35) + 40,
          aetherBus: Math.floor(Math.random() * 20) + 25
        });
        
        return newData;
      });

      // Simulate status changes
      setComponentStatuses(prev => prev.map(component => ({
        ...component,
        load: Math.max(10, Math.min(95, component.load + (Math.random() - 0.5) * 10)),
        status: Math.random() > 0.9 ? 'processing' : component.status
      })));
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-500';
      case 'processing': return 'bg-blue-500';
      case 'idle': return 'bg-yellow-500';
      case 'error': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const renderOverview = () => (
    <div className="space-y-6">
      {/* System Status Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {componentStatuses.map((component, index) => (
          <div key={index} className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between mb-4">
              <div className="text-gray-600">{component.icon}</div>
              <div className={`w-3 h-3 rounded-full ${getStatusColor(component.status)} animate-pulse`}></div>
            </div>
            <h3 className="font-semibold text-gray-900 mb-2">{component.name}</h3>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-500">Load</span>
                <span className="font-medium">{Math.round(component.load)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-500"
                  style={{ width: `${component.load}%` }}
                ></div>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-500">Uptime</span>
                <span className="font-medium text-green-600">{component.uptime}</span>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Real-time Metrics Chart */}
      <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
          <Activity className="w-5 h-5 mr-2" />
          System Performance Metrics
        </h3>
        <ResponsiveContainer width="100%" height={300}>
          <LineChart data={systemMetrics}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="time" />
            <YAxis />
            <Tooltip />
            <Line type="monotone" dataKey="agio" stroke="#3b82f6" strokeWidth={2} name="AGIO" />
            <Line type="monotone" dataKey="silentVessel" stroke="#10b981" strokeWidth={2} name="SilentVessel" />
            <Line type="monotone" dataKey="echo" stroke="#f59e0b" strokeWidth={2} name="Echo" />
            <Line type="monotone" dataKey="aetherBus" stroke="#8b5cf6" strokeWidth={2} name="AetherBus" />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );

  const renderArchitecture = () => (
    <div className="space-y-6">
      {/* Philosophy Section */}
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200 p-6">
        <h3 className="text-lg font-semibold text-blue-900 mb-4">System Philosophy: Inspira vs Firma</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-blue-800 mb-2">Inspira (Intent/Will)</h4>
            <p className="text-blue-700 text-sm">
              The driving philosophy and vision that defines the system's purpose and autonomous behavior patterns.
            </p>
          </div>
          <div>
            <h4 className="font-medium text-blue-800 mb-2">Firma (Structure)</h4>
            <p className="text-blue-700 text-sm">
              The physical implementation constraints and runtime environment (Termux, edge computing).
            </p>
          </div>
        </div>
      </div>

      {/* Component Capabilities */}
      <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Component Capabilities Analysis</h3>
        <ResponsiveContainer width="100%" height={400}>
          <RadarChart data={capabilities}>
            <PolarGrid />
            <PolarAngleAxis dataKey="component" />
            <PolarRadiusAxis angle={90} domain={[0, 100]} />
            <Radar name="Performance" dataKey="performance" stroke="#3b82f6" fill="#3b82f6" fillOpacity={0.3} strokeWidth={2} />
            <Tooltip />
          </RadarChart>
        </ResponsiveContainer>
      </div>

      {/* Technical Stack */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <Cpu className="w-5 h-5 mr-2" />
            Termux Runtime Stack
          </h3>
          <div className="space-y-3">
            <div className="flex items-center justify-between p-3 bg-gray-50 rounded">
              <span className="font-medium">LLM Engine</span>
              <span className="text-sm text-gray-600">Llama.cpp / MLC LLM</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-50 rounded">
              <span className="font-medium">Vision Runtime</span>
              <span className="text-sm text-gray-600">ONNX Runtime Mobile</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-50 rounded">
              <span className="font-medium">Message Broker</span>
              <span className="text-sm text-gray-600">AetherBus (Custom)</span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <GitBranch className="w-5 h-5 mr-2" />
            System Properties
          </h3>
          <div className="space-y-3">
            <div className="p-3 bg-green-50 rounded border border-green-200">
              <div className="font-medium text-green-800">Verifiable Evolution</div>
              <div className="text-sm text-green-600">Git-based source of truth</div>
            </div>
            <div className="p-3 bg-blue-50 rounded border border-blue-200">
              <div className="font-medium text-blue-800">Full State Recovery</div>
              <div className="text-sm text-blue-600">Persistent identity mechanism</div>
            </div>
            <div className="p-3 bg-purple-50 rounded border border-purple-200">
              <div className="font-medium text-purple-800">Economic Autonomy</div>
              <div className="text-sm text-purple-600">Independent operation goal</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderComponentDetail = (componentName: string) => {
    const component = componentStatuses.find(c => c.name.includes(componentName));
    if (!component) return null;

    return (
      <div className="space-y-6">
        <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">{component.name}</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-medium text-gray-800 mb-2">Current Status</h4>
              <div className="space-y-2">
                <div className="flex items-center">
                  <div className={`w-3 h-3 rounded-full ${getStatusColor(component.status)} mr-2`}></div>
                  <span className="capitalize">{component.status}</span>
                </div>
                <div>Load: {Math.round(component.load)}%</div>
                <div>Uptime: {component.uptime}</div>
              </div>
            </div>
            <div>
              <h4 className="font-medium text-gray-800 mb-2">System Integration</h4>
              <div className="space-y-2 text-sm text-gray-600">
                {component.name.includes('AGIO') && (
                  <>
                    <div>• Multimodal RAG Implementation</div>
                    <div>• Memory Consolidation Pipeline</div>
                    <div>• Knowledge Graph Integration</div>
                  </>
                )}
                {component.name.includes('SilentVessel') && (
                  <>
                    <div>• BioVisionNet Processing</div>
                    <div>• Qualia Extraction Engine</div>
                    <div>• Visual Perception Pipeline</div>
                  </>
                )}
                {component.name.includes('Echo') && (
                  <>
                    <div>• EmotionVector Generation</div>
                    <div>• Expressive Output Synthesis</div>
                    <div>• Creative Response Engine</div>
                  </>
                )}
                {component.name.includes('AetherBus') && (
                  <>
                    <div>• Event-Driven Architecture</div>
                    <div>• Message Routing System</div>
                    <div>• Microservice Orchestration</div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <Brain className="w-8 h-8 text-blue-600 mr-3" />
              <div>
                <h1 className="text-xl font-bold text-gray-900">Synthetic Being</h1>
                <p className="text-sm text-gray-500">Existence Architecture Dashboard</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-sm text-gray-600">System Active</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex space-x-8">
            {[
              { id: 'overview', label: 'Overview', icon: <Activity className="w-4 h-4" /> },
              { id: 'architecture', label: 'Architecture', icon: <GitBranch className="w-4 h-4" /> },
              { id: 'AGIO', label: 'AGIO Memory', icon: <Database className="w-4 h-4" /> },
              { id: 'SilentVessel', label: 'SilentVessel', icon: <Eye className="w-4 h-4" /> },
              { id: 'Echo', label: 'Echo Expression', icon: <MessageSquare className="w-4 h-4" /> }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setSelectedComponent(tab.id)}
                className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                  selectedComponent === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                {tab.icon}
                <span>{tab.label}</span>
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {selectedComponent === 'overview' && renderOverview()}
        {selectedComponent === 'architecture' && renderArchitecture()}
        {(selectedComponent === 'AGIO' || selectedComponent === 'SilentVessel' || selectedComponent === 'Echo') && 
         renderComponentDetail(selectedComponent)}
      </div>
    </div>
  );
};

export default SyntheticBeingDashboard;
